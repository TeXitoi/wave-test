#![no_main]
#![no_std]
#![feature(proc_macro_gen)]
#![feature(use_extern_macros)]

extern crate cortex_m;
#[macro_use]
extern crate cortex_m_rt as rt;
extern crate cortex_m_rtfm as rtfm;
extern crate stm32f103xx_hal as hal;
extern crate panic_semihosting;

use hal::prelude::*;
use cortex_m::peripheral::syst::SystClkSource;
use rtfm::Threshold;

type Pwm = hal::pwm::Pwm<hal::stm32f103xx::TIM2, hal::pwm::C1>;

entry!(run);

fn run() -> ! {
    main();
    loop {}
}

rtfm::app! {
    device: hal::stm32f103xx,

    resources: {
        static CNT: usize = 0;
        static PWM: Pwm;
    },

    tasks: {
        SYS_TICK: {
            path: sys_tick,
            resources: [PWM, CNT],            
        },
    },
}

fn init(mut p: init::Peripherals, mut _r: init::Resources) -> init::LateResources {
    let mut flash = p.device.FLASH.constrain();
    let mut rcc = p.device.RCC.constrain();
    let mut afio = p.device.AFIO.constrain(&mut rcc.apb2);
    let mut gpioa = p.device.GPIOA.split(&mut rcc.apb2);
    let clocks = rcc.cfgr.freeze(&mut flash.acr);
    let c1 = gpioa.pa0.into_alternate_push_pull(&mut gpioa.crl);
    let mut pwm = p.device
        .TIM2
        .pwm(c1, &mut afio.mapr, 40000.hz(), clocks, &mut rcc.apb1);
    pwm.enable();
    
    // configure the system timer to generate one interrupt every second
    p.core.SYST.set_clock_source(SystClkSource::Core);
    p.core.SYST.set_reload(200); // 40kHz
    p.core.SYST.enable_interrupt();
    p.core.SYST.enable_counter();

    init::LateResources {
        PWM: pwm
    }
}

fn sys_tick(_t: &mut Threshold, mut r: SYS_TICK::Resources) {
    let max = r.PWM.get_max_duty();
    r.PWM.set_duty(SIN[*r.CNT] as u16 * max / 255);
    *r.CNT += 1;
    if *r.CNT >= SIN.len() {
        *r.CNT = 0;
    }
}

fn idle() -> ! {
    loop {
        rtfm::wfi();
    }
}

exception!(HardFault, hard_fault);

fn hard_fault(ef: &rt::ExceptionFrame) -> ! {
    panic!("{:#?}", ef);
}

exception!(*, default_handler);

fn default_handler(irqn: i16) {
    panic!("Unhandled exception (IRQn = {})", irqn);
}

static SIN: [u8; 400] = [
    127,
    129,
    131,
    133,
    135,
    137,
    139,
    141,
    143,
    145,
    147,
    149,
    151,
    153,
    155,
    157,
    159,
    161,
    162,
    164,
    166,
    168,
    170,
    172,
    174,
    176,
    177,
    179,
    181,
    183,
    185,
    186,
    188,
    190,
    192,
    193,
    195,
    197,
    198,
    200,
    202,
    203,
    205,
    206,
    208,
    209,
    211,
    212,
    214,
    215,
    217,
    218,
    220,
    221,
    222,
    224,
    225,
    226,
    227,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    244,
    245,
    246,
    246,
    247,
    248,
    248,
    249,
    249,
    250,
    250,
    251,
    251,
    252,
    252,
    252,
    253,
    253,
    253,
    253,
    254,
    254,
    254,
    254,
    254,
    254,
    254,
    254,
    254,
    254,
    254,
    253,
    253,
    253,
    253,
    252,
    252,
    252,
    251,
    251,
    250,
    250,
    249,
    249,
    248,
    248,
    247,
    246,
    246,
    245,
    244,
    244,
    243,
    242,
    241,
    240,
    239,
    238,
    237,
    236,
    235,
    234,
    233,
    232,
    231,
    230,
    229,
    227,
    226,
    225,
    224,
    222,
    221,
    220,
    218,
    217,
    215,
    214,
    212,
    211,
    209,
    208,
    206,
    205,
    203,
    202,
    200,
    198,
    197,
    195,
    193,
    192,
    190,
    188,
    186,
    185,
    183,
    181,
    179,
    177,
    176,
    174,
    172,
    170,
    168,
    166,
    164,
    162,
    161,
    159,
    157,
    155,
    153,
    151,
    149,
    147,
    145,
    143,
    141,
    139,
    137,
    135,
    133,
    131,
    129,
    127,
    125,
    123,
    121,
    119,
    117,
    115,
    113,
    111,
    109,
    107,
    105,
    103,
    101,
    99,
    97,
    95,
    93,
    92,
    90,
    88,
    86,
    84,
    82,
    80,
    78,
    77,
    75,
    73,
    71,
    69,
    68,
    66,
    64,
    62,
    61,
    59,
    57,
    56,
    54,
    52,
    51,
    49,
    48,
    46,
    45,
    43,
    42,
    40,
    39,
    37,
    36,
    34,
    33,
    32,
    30,
    29,
    28,
    27,
    25,
    24,
    23,
    22,
    21,
    20,
    19,
    18,
    17,
    16,
    15,
    14,
    13,
    12,
    11,
    10,
    10,
    9,
    8,
    8,
    7,
    6,
    6,
    5,
    5,
    4,
    4,
    3,
    3,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    8,
    8,
    9,
    10,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    27,
    28,
    29,
    30,
    32,
    33,
    34,
    36,
    37,
    39,
    40,
    42,
    43,
    45,
    46,
    48,
    49,
    51,
    52,
    54,
    56,
    57,
    59,
    61,
    62,
    64,
    66,
    68,
    69,
    71,
    73,
    75,
    77,
    78,
    80,
    82,
    84,
    86,
    88,
    90,
    92,
    93,
    95,
    97,
    99,
    101,
    103,
    105,
    107,
    109,
    111,
    113,
    115,
    117,
    119,
    121,
    123,
    125,
];
